name: Aggiorna README con ultimi commit pubblici

on:
  schedule:
    - cron: '0 6 * * *'  
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Installa requests
        run: pip install requests

      - name: Recupera ultimi commit pubblici e aggiorna README
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: "comitanigiacomo"  
        run: |
          python3 << 'EOF'
          import os
          import requests
          from datetime import datetime

          user = os.environ['GITHUB_USER']
          token = os.environ['GITHUB_TOKEN']
          headers = {'Authorization': f'token {token}'}

         
          repos_url = f'https://api.github.com/users/{user}/repos?per_page=100&type=public'
          repos = requests.get(repos_url, headers=headers).json()

          output = "## Ultimi commit pubblici\n\n"

          count_commits = 0
          max_commits = 3

          for repo in repos:
              repo_name = repo['name']
              commits_url = f'https://api.github.com/repos/{user}/{repo_name}/commits?per_page=3'
              commits = requests.get(commits_url, headers=headers).json()

              for commit in commits:
                  if count_commits >= max_commits:
                      break
                  sha = commit['sha']
                  message = commit['commit']['message'].split('\n')[0]
                  date_str = commit['commit']['committer']['date']
                  date = datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%SZ')
                  short_date = date.strftime('%Y-%m-%d')
                  url = commit['html_url']

                  
                  files_url = f'https://api.github.com/repos/{user}/{repo_name}/commits/{sha}'
                  commit_details = requests.get(files_url, headers=headers).json()
                  files = commit_details.get('files', [])

                  
                  folders = set()
                  for f in files:
                      path = f['filename']
                      folder = path.split('/')[0]
                      folders.add(folder)

                  folders_str = ', '.join(folders) if folders else 'root'

                  output += f"- [{repo_name}]({repo['html_url']}): [{message}]({url}) in `{folders_str}` ({short_date})\n"

                  count_commits += 1
              if count_commits >= max_commits:
                  break

          
          with open('README.md', 'r', encoding='utf-8') as f:
              content = f.read()

          
          import re
          new_block = f"<!--commits-start-->\n{output}\n<!--commits-end-->"
          content_new = re.sub(r'<!--commits-start-->.*<!--commits-end-->', new_block, content, flags=re.DOTALL)

          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(content_new)
          EOF

      - name: Commit e push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Aggiorna ultimi commit pubblici"
          git push
        continue-on-error: true
